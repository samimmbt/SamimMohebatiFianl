{% extends 'base.html.twig' %}
{% block header %}
<div class="mb-3" id="header">
    <div id="ranking" title="{{ 'Global Ranking' | trans }}" onclick="showRanks()">
        {{ 'Ranking' | trans }}
    </div>
    <div id="requests" class="menu menu-icon" title="{{ 'Requests' | trans }}">
        {{ 'Requests' | trans }}
    </div>
    <a href="{{ path('app_logout') }}" title="{{ 'Logout' | trans }}">{{ 'Logout' | trans }}</a>
</div>
{% endblock %}
{% block script %}
	<script>
    
let isFetching = false;
let userIdentifier = '{{ app.user.userIdentifier }}'; // Getting Current user username
document.addEventListener('DOMContentLoaded', () => { 
    setInterval(fetchGameRequests, 5000); // Fetch game requests every 5 seconds
});

/*
* Function to fetch game requests
*/
function fetchGameRequests() {
    if (isFetching)
        return;
    isFetching = true; 
    fetch(`/request`).then(response => response.json()).then(data => {
        updateRequestPanel(data); // return this user requests , recived requests
        getAcceptedRequests(); 
    }).catch(error => console.error('Error fetching requests:', error)).finally(() => {
        isFetching = false; // Reset the flag after fetching
    });
}

/*
* Function to fetch accepted requests
*/
function getAcceptedRequests() {
    fetch(`/request/acceptedRequests`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    }).then(data => {
        updateAcceptedRequestsUI(data); // Update the UI with the received data
    }).catch(error => console.error('Error fetching accepted requests:', error));
}

/*
* Function to accept a request
*/
function accept(opponent) {
    fetch(`/request/accept/${opponent}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => response.json()).then(data => {
        if (data.success) {
            fetchGameRequests(); // Fetch updated requests after accepting
        }
    }).catch(error => console.error('Error accepting request:', error));
}

/*
*   Function to reject a request
*/

function reject(opponent) {
    fetch(`/request/reject/${opponent}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => response.json()).then(data => {
        if (data.success) {
            fetchGameRequests(); // Fetch updated requests after rejecting
        }
    }).catch(error => console.error('Error rejecting request:', error));
}

function gamelist(request, list) { // does two work first its a request it sends a request else it will add item to header named Games
    const { opponent, accept, reciver } = list;
    const headerElement = document.getElementById("header");
    const gamesElement = document.getElementById("games");
    const headerItem = `<div id="games" class="menu" title="{{ 'Game list' | trans }}">{{ 'Game' | trans }}</div>`;
    console.log("list: " + list.receiver);
    if (request) {
        fetch(`/game/${request}`).then(response => response.json()).then(data => {
            if (data.success && data.redirectUrl) {
                window.location.href = data.redirectUrl; // redirect using JavaScript
            }
            console.log("data: ".data);
        }).catch(error => console.error('Error fetching start request:', error));
    } else if (list && accept === true) {
        if (!gamesElement) {
            headerElement.insertAdjacentHTML('beforeend', headerItem); // Append header only once
        }

        const displayUser = (reciver === userIdentifier) ? opponent : reciver;
        addGameElement(displayUser); // add game element for the accepted game
    }
}
/*
* Function to update the request panel
*/
function updateRequestPanel(data) {
    const requestsElement = document.getElementById("requests");
    let requestCount = 0;

    requestsElement.innerHTML = "";
    if (data) {
        data.forEach(request => {
            const { opponent, accept } = request;
            const acceptRejectFunction = accept ? 'reject' : 'accept';

            requestsElement.innerHTML += `
            <li style="display: flex; flex-wrap: nowrap; flex-direction: row; justify-content: space-around;">
                <div class="item">${opponent}</div>
                <div class="item" onclick="${acceptRejectFunction}('${opponent}')">${accept ? '‚ùå' : '‚úÖ'
                }</div>
            </li>`;

            requestCount++;

            if (accept) {
                gamelist(false, request);
            }
        });
    }
    requestsElement.innerHTML += `{{ 'Requests' | trans }}: ${requestCount}`;
}
/*
* Function to update the accepted requests UI
*/
function updateAcceptedRequestsUI(data) {
    const headerElement = document.getElementById("header");
    const gamesElement = document.getElementById("games");
    const headerItem = `<div id="games" class="menu" title="{{ 'Game list' | trans }}">{{ 'Game' | trans }}</div>`;

    if (data.length > 0) {
        if (!gamesElement) {
            headerElement.insertAdjacentHTML('beforeend', headerItem); // Append header only once
        } data.forEach(gameRequest => {
            // if(gameRequest.opponent === userIdentifier){
            //     addGameElement(userIdentifier);
            // }else{
            // console.log("gameRequest",gameRequest);
            addGameElement(gameRequest.opponent);
            // Add game element for each accepted request where the sender is me
            // }
        });
    }
}
/*
* Function Sending a new request
*/
function sendPlayingRequest(opponent) {
    fetch(`/request/send/${opponent}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => response.json()).then(data => {
        if (data.success) {
            fetchGameRequests(); // Fetch updated requests after rejecting
        }
    }).catch(error => console.error('Error rejecting request:', error));
}
/*
* Function to redirect after accepting
*/
function playGame(opponent) {
    window.location.href = `/en/Tic/Tac/Toe?opponent=${opponent}`;
}
/*
* Function to add game elements
*/
function addGameElement(opponent) {
    const gamesElement = document.getElementById("games");
    if (![...gamesElement.children].some(item => item.textContent.includes(opponent))) {
        gamesElement.innerHTML += `
            <li style="display: flex; flex-wrap: nowrap; flex-direction: row; justify-content: space-around;">
                <div class="item">${opponent}</div>
                <div class="item" onclick="playGame('${opponent}', false)">{{'Play'|trans}} üéÆ</div>
            </li>`;
    }
}
/*
*Function to show ranks
*/

function updateRanks(data){
      const total = data.data.length;
            data.data.forEach((ranker, index) => {
    		let intensity = Math.round(200 * (index / (total)));
    		backgroundColor = `rgb(219, ${intensity+25}, ${intensity})`;
                ranks.innerHTML += `<div class="ranker" style="background:${backgroundColor}">#${ranker.number} ${ranker.name} ${ranker.wins}</div>`;
            });
}
/*
* Function to handel Get Ranks 
*/
function showRanks() {
	const secondItem = document.body.children[1];
    const newItem = document.createElement('div');
    newItem.id = 'ranks'; 
    document.body.insertBefore(newItem, secondItem);
    let ranks = document.getElementById('ranks');
    ranks.innerHTML = 'Ranking List:';

    fetch(`/ranking`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => response.json())
    .then(data => {
        if (data.success) {
			updateRanks(data);//Show rankers in element
        }  else {
            console.error('Failed to load ranking data');
        }
    }).catch(error => console.error('Error receiving request:', error));
}
	</script>
{% endblock script %}
{% block body %}

	<h1>Tic Tac Toe</h1>
	{{ form_start(form) }}
	{{ form_widget(form) }}
	<button type="submit" id="play">{{'Search'|trans}}</button>
	{{ form_end(form) }}
	{% set data = app.request.get('users') %}
	{% if data is not empty%}
		<div>
			<h3>{{'Search Results'|trans}}:</h3>
			<ul class="menu2">
				{% for user in data %}
					<li class="listitem">
						{{ user.username }}
						<button id="play" class="small" name="play" onclick="sendPlayingRequest('{{user.username}}')">{{'Play'|trans}}</button>
					</li>
				{% endfor %}

			</ul>
		</div>
	{% endif %}
{% endblock %}
