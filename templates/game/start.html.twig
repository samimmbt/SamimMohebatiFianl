{% extends 'base.html.twig' %}
{% block header %}
	<div class="mb-3">
		<div id="ranking" title="Global Ranking" onclick="showRanks()">
			Ranking
		</div>
		<div id="mode" class="menu menu-icon" title="cooming soon">
			Mode
			<div class="item disable">hard</div>
			<div class="item disable">very hard</div>
		</div>

		<a href="{{ path('app_logout') }}" title="Logout">Logout</a>
	</div>
{% endblock %}
{% block script %}
	<script>
	let gameId = {{gameId}} , playerRole = '{{playerRole}}';

let checkInterval;

document.addEventListener('DOMContentLoaded', () => {
    // Set and store the interval ID
    checkInterval = setInterval(() => {
        handleWinner(gameId);
    }, 5000);
});

function handleWinner(gameId) {
    fetch(`/check-winner/${gameId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            displayWinner(data.message);
            clearInterval(checkInterval); // Stop checking for a winner
			if(playerRole !== data.winner){
				window.location.href = 'http://127.0.0.1:8000/home';
			}
        } else {
            console.log("No winner yet, reloading page.");
            setTimeout(() => {
                window.location.reload();
            }, 3000);  // Reload the page after 5 seconds if no winner
        }
    })
    .catch(error => {
        console.error('Error determining winner:', error);
        setTimeout(() => {
            window.location.reload();
        }, 5000);  // Attempt to reload on error
    });
}
function makeMove(position, gameId, element) {
    if (!element.classList.contains('disabled')) {
        element.classList.add('disabled'); // Prevent further clicks on this cell
        handleMoves(gameId, position);
    }
}

function displayWinner(message) {
    const winnerMessage = document.getElementById('winnerMessage');
    winnerMessage.textContent = message;
    winnerMessage.style.display = 'block';
}

function handleMoves(gameId, position = null) {
    fetch(`/move/${gameId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({ position: position })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateBoard(data.board);
        } else {
            console.log('Move could not be made:', data.message);
        }
    })
    .catch(error => console.error('Error making move:', error));
}

function updateBoard(board) {
    board.forEach((value, index) => {
        let cell = document.getElementById(`label_${index}`);
        if (cell) {
            cell.textContent = value; // Update cell content
        }
    });
}

function showRanks() {
	const secondItem = document.body.children[1];
    const newItem = document.createElement('div');
    newItem.id = 'ranks'; 
    document.body.insertBefore(newItem, secondItem);
    let ranks = document.getElementById('ranks');
    ranks.innerHTML = 'Ranking List:';

    fetch(`/ranking`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => response.json())
    .then(data => {
        if (data.success) {
			  const total = data.data.length;
            data.data.forEach((ranker, index) => {
    		let intensity = Math.round(200 * (index / (total)));
    		backgroundColor = `rgb(219, ${intensity+25}, ${intensity})`;
                ranks.innerHTML += `<div class="ranker" style="background:${backgroundColor}">#${ranker.number} ${ranker.name} ${ranker.wins}</div>`;
            });
        }  else {
            console.error('Failed to load ranking data');
        }
    }).catch(error => console.error('Error receiving request:', error));
}
	</script>
{% endblock %}
{% block body %}

	<h1>Tic Tac Toe</h1>
	{% if game is not null and game == true%}
		<p>Game is
			{% if currentTurn != playerRole %}disabled
			{% else %}
				Active
			{% endif %}!</p>
		<div id="winnerMessage" style="display: none;"></div>
		<form id="form" action="{{ path('make_move',{ gameId: game.id }) }}" method="post">
			<table>
				{% for row in 0..2 %}
					<tr>
						{% for col in 0..2 %}
							{% set position = (row * 3) + col %}
							<td>
								{% if board[position] %}
									<label class="gamebtn">{{ board[position] }}</label>
								{% else %}
									<input type="button" id="position_{{ position }}" name="position" value="{{ position }}" hidden>
									<label for="position_{{ position }}" id="label_{{ position }}" class="gamebtn {% if currentTurn != playerRole %}disabled{% endif %}" onclick="makeMove({{ position }},{{game.id}},this);"></label>
								{% endif %}
							</td>
						{% endfor %}
					</tr>
				{% endfor %}
			</table>
		</form>
	{% else %}
		{% if app.user.userIdentifier is not null %}
			<p>{{app.user.userIdentifier}}
				is waiting for a player to join</p>
		{% endif %}
	{% endif %}
{% endblock %}

